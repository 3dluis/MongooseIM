language: erlang
before_install:
        - sudo apt-get update
        - sudo apt-get install libpam0g-dev libexpat1-dev odbc-postgresql libmyodbc
        - if [ $PRESET = 'ldap_mnesia' ]; then sudo apt-get install slapd ldap-utils; fi
        - tools/travis-generate-pass.sh
install:
        - tools/travis-build.sh
        - tools/travis-build-tests.sh
before_script:
        - tools/travis-setup-db.sh
        - if [ $PRESET = 'ldap_mnesia' ]; then sudo tools/travis-setup-ldap.sh; fi
script: tools/travis-test.sh

after_script:
        - cat `ls -1 -d -t apps/ejabberd/logs/ct_run* | head -1`/apps.ejabberd.logs/run.*/suite.log
        - tail -100 dev/mongooseim_node1/log/ejabberd.log
        - if [ -s dev/mongooseim_node1/log/crash.log ]; then cat dev/mongooseim_node1/log/crash.log; fi
        - tail -100 dev/mongooseim_node2/log/ejabberd.log
        - if [ -s dev/mongooseim_node2/log/crash.log ]; then cat dev/mongooseim_node2/log/crash.log; fi
        - cat `ls -1 -d -t test/ejabberd_tests/ct_report/ct_run.* | head -1`/ejabberd_tests.*/run.*/suite.log
        - cat dev/mongooseim_node1/etc/ejabberd.cfg

after_success:
        - make cover_report

services:
        - redis-server
branches:
        only:
                - master
                - stable

otp_release:
        - 17.5
env:
        - PRESET=internal_redis DB=mnesia REL_CONFIG=with-redis
        - PRESET=internal_mnesia DB=mnesia REL_CONFIG=minimal
        - PRESET=mysql_mnesia DB=mysql REL_CONFIG=with-mysql
        - PRESET=odbc_pgsql_mnesia DB=pgsql REL_CONFIG=with-odbc
        - PRESET=pgsql_mnesia DB=pgsql REL_CONFIG=with-pgsql
        - PRESET=ldap_mnesia DB=mnesia REL_CONFIG=minimal
        - PRESET=riak_mnesia DB=riak REL_CONFIG=with-riak
        - PRESET=external_mnesia DB=mnesia REL_CONFIG=minimal

matrix:
    include:
        - otp_release: R16B03
          env: PRESET=internal_mnesia DB=mnesia REL_CONFIG=minimal
        - otp_release: 18.1
          env: PRESET=internal_mnesia DB=mnesia REL_CONFIG=minimal

after_failure: # Upload ct_report directory on Github pages for trusted builds
  - test "$TRAVIS_SECURE_ENV_VARS" = true && git config --global user.email "$(git --no-pager show -s --format='%ae' HEAD)"
  - test "$TRAVIS_SECURE_ENV_VARS" = true && git config --global user.name "$(git --no-pager show -s --format='%an' HEAD)"
  - test "$TRAVIS_SECURE_ENV_VARS" = true && mkdir -p ~\/.ssh\/
  - test "$TRAVIS_SECURE_ENV_VARS" = true && openssl aes-256-cbc -K $encrypted_1e58cc98c92a_key -iv $encrypted_1e58cc98c92a_iv -in .travis_deploy_rsa.enc -out ~\/.ssh\/travis_deploy_rsa -d
  - test "$TRAVIS_SECURE_ENV_VARS" = true && eval "$(ssh-agent -s)" #start the ssh agent
  - test "$TRAVIS_SECURE_ENV_VARS" = true && chmod 600 ~\/.ssh\/travis_deploy_rsa # this key should have push access
  - test "$TRAVIS_SECURE_ENV_VARS" = true && ssh-add ~\/.ssh\/travis_deploy_rsa
  - test "$TRAVIS_SECURE_ENV_VARS" = true && git clone "git@github.com:arcusfelis/mongooseim-ct-reports.git"
  - test "$TRAVIS_SECURE_ENV_VARS" = true && cd mongooseim-ct-reports
  - test "$TRAVIS_SECURE_ENV_VARS" = true && rm -rf "$TRAVIS_JOB_NUMBER"
  - test "$TRAVIS_SECURE_ENV_VARS" = true && cp -rdp ../test/ejabberd_tests/ct_report "$TRAVIS_JOB_NUMBER"
  - test "$TRAVIS_SECURE_ENV_VARS" = true && git add "$TRAVIS_JOB_NUMBER"
  - test "$TRAVIS_SECURE_ENV_VARS" = true && git commit -m "Publish reports for $TRAVIS_JOB_NUMBER"
  - test "$TRAVIS_SECURE_ENV_VARS" = true && for i in 1 2 3 4 5; do git push origin gh-pages && break; echo "Retry $i"; sleep $i; git pull; done
  - test "$TRAVIS_SECURE_ENV_VARS" = true && echo "Check http://arcusfelis.github.io/mongooseim-ct-reports/$TRAVIS_JOB_NUMBER/"
